<?php

namespace App;

use AlgoliaSearch\Client as AlgoliaClient;
use App\FormEntry;
use App\FormSection;
use App\Listing;

class Algolia
{   
    public static function addListing(FormEntry $formEntry, Listing $listing)
    {
        // Skip if already added.
        if ($listing->is_in_algolia) {
            return $listing;
        }

        $client = self::getClient();

        // Get target form section.
        $targetFormSection = $listing->formSection;

        // Add each listing to Algolia.
        $client
            ->initIndex($targetFormSection->search_index)
            ->addObject(self::formatSearchObject($formEntry, $listing));

        $listing->is_in_algolia = true;
        $listing->update();
        
        return $listing;
    }

    public static function deleteListing(
        FormSection $targetFormSection,
        $publishedEntrySectionId
    ) {
        $client = self::getClient();
        
        return $client
            ->initIndex($targetFormSection->search_index)
            ->deleteObject($publishedEntrySectionId);
    }

    private static function getClient()
    {
        return new AlgoliaClient(env('ALGOLIA_APP_ID'), env('ALGOLIA_SECRET'));
    }

    private static function formatSearchObject(
        FormEntry $formEntry,
        Listing $listing
    ) {
        // Create the search object.
        $data = $formEntry->data;

        // ID that will be used by Algolia to uniquely identify the
        // object.
        $data['objectID'] = $listing->published_entry_section_id;

        // Add other meta properties.
        $data['form_entry_id'] = $formEntry->id;
        $data['root_directory_id'] = $formEntry->form->directory->id;
        $data['root_form_id'] = $formEntry->form->id;
        
        // Add the WordPress post ID to the search object. This property
        // can't be generated by `FormEntry::getDataAttribute()` because it is
        // dependent on the WordPress installation it is published to.
        $data['wp_post_id'] = $listing->wp_post_id;

        // TODO
        $data['wp_post_url'] = $listing->data['wp_post_url'];

        // Name of the section we're adding.
        $targetSection = $listing->entrySection->formSection->object_key;

        // The target section is added as a single object and not as an
        // array. Code below goes through all the sections to find the
        // matching element and re-adds it back to the search object as
        // an object (discarding the other elements).
        $data['sections'][$targetSection] = array_first(
            $data['sections'][$targetSection],
            function($fieldset) use ($listing) {
                return $fieldset['_meta']['entry_section_id']
                    === $listing->entrySection->id;
            }
        );

        return $data;
    }
}
